Traceback (most recent call last):
  File "C:\Users\zimme\miniconda3\envs\tf\lib\site-packages\jupyter_cache\executors\utils.py", line 51, in single_nb_execution
    executenb(
  File "C:\Users\zimme\miniconda3\envs\tf\lib\site-packages\nbclient\client.py", line 1204, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\zimme\miniconda3\envs\tf\lib\site-packages\nbclient\util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "C:\Users\zimme\miniconda3\envs\tf\lib\site-packages\nbclient\util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "C:\Users\zimme\miniconda3\envs\tf\lib\asyncio\base_events.py", line 646, in run_until_complete
    return future.result()
  File "C:\Users\zimme\miniconda3\envs\tf\lib\site-packages\nbclient\client.py", line 663, in async_execute
    await self.async_execute_cell(
  File "C:\Users\zimme\miniconda3\envs\tf\lib\site-packages\nbclient\client.py", line 965, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\zimme\miniconda3\envs\tf\lib\site-packages\nbclient\client.py", line 862, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# modified after https://www.askpython.com/python/examples/k-means-clustering-from-scratch

#Importing required modules
import numpy as np
from scipy.spatial.distance import cdist 

n1=np.where(E[0,:]<2)[0]

t=E[0,n1].T
x=E[1:,n1].T
k=5
nit=10


# initialize labels
nd=np.shape(x)[0]

labels = np.mod(range(nd),k)
centroids = x[[range(k)][0], :] 
variances = 0*centroids

def mCluster(x,labels,k,centroids,variances):
    for ii in range(k):
        ni=labels==ii
        if np.sum(ni)>0:
            tmp=x[ni]
            m1= tmp.mean(axis=0) 
            m2= (tmp*tmp).mean(axis=0)
        else:
            m1=0
            m2=0
        centroids[ii,:]=m1           # centroid
        variances[ii,:]=m2-m1**2     # variance
    return centroids,variances

centroids,variances=mCluster(t,x,labels,k,centroids,variances)
print(labels,variances.trace())

fig = plt.figure("figure.figsize",[15,5])
plt.plot(t,x,'.-')
plt.show()

#Repeating the above steps for a defined number of iterations
best=np.Inf	
for ni in range(nit): 
    #Updating Centroids by taking mean of Cluster it belongs to
    centroids,variances=mCluster(t,x,labels,k,centroids,variances)
    ##
    # if variance get worth break loop
    inert=variances.trace()
    if inert >= best: break
    best=inert
    #
    distances = cdist(x, centroids ,'euclidean')
    labels = np.array([np.argmin(ii) for ii in distances])
    for ii in range(k):
        ni=np.where(labels==ii)
        if np.len(ni)>0:
            tcl=tt[ni]
            if np.len(ni>1):
                ici=tcl[1:]-tcl[:-1]


    print(ni,labels,best,np.shape(centroids))

for idat in range(nc-1):
    fig = plt.figure("figure.figsize",[15,5])
    u_labels = np.unique(labels)
    for label in u_labels:
        plt.plot(t[labels == label] , x[labels == label,idat],'.-', label = label)
    plt.legend()
    plt.show()

------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mTypeError[0m                                 Traceback (most recent call last)
Input [1;32mIn [11][0m, in [0;36m<cell line: 36>[1;34m()[0m
[0;32m     33[0m         variances[ii,:][38;5;241m=[39mm2[38;5;241m-[39mm1[38;5;241m*[39m[38;5;241m*[39m[38;5;241m2[39m     [38;5;66;03m# variance[39;00m
[0;32m     34[0m     [38;5;28;01mreturn[39;00m centroids,variances
[1;32m---> 36[0m centroids,variances[38;5;241m=[39m[43mmCluster[49m[43m([49m[43mt[49m[43m,[49m[43mx[49m[43m,[49m[43mlabels[49m[43m,[49m[43mk[49m[43m,[49m[43mcentroids[49m[43m,[49m[43mvariances[49m[43m)[49m
[0;32m     37[0m [38;5;28mprint[39m(labels,variances[38;5;241m.[39mtrace())
[0;32m     39[0m fig [38;5;241m=[39m plt[38;5;241m.[39mfigure([38;5;124m"[39m[38;5;124mfigure.figsize[39m[38;5;124m"[39m,[[38;5;241m15[39m,[38;5;241m5[39m])

[1;31mTypeError[0m: mCluster() takes 5 positional arguments but 6 were given
TypeError: mCluster() takes 5 positional arguments but 6 were given

